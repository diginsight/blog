[
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To Diginsight Blog",
    "section": "",
    "text": "Welcome! This is the first post in a Diginsight blog. \nhere, we’ll discuss and illustrate diginsight components and samples implementation.\nor any interesting thing we’ll come across while working with diginsight"
  },
  {
    "objectID": "posts/20240929 - Steps to add diginsight to DiginsightCopilotApi/index.html",
    "href": "posts/20240929 - Steps to add diginsight to DiginsightCopilotApi/index.html",
    "title": "Steps to add diginsight to SampleWebApi01",
    "section": "",
    "text": "Today I worked with some friends at integrating diginsight to a new web API.\nIn this post I propose the steps we followed applied to the sample SampleWebApi01 available into the telemetry_samples repository. \n\n\n\nSampleWeb API project\n\n\nYou can use the steps below to obtain diginsight text based streams on Log4Net and the appservice Console.\n\nSTEP01: Add references to diginsight packages\nI start adding the following 3 references:\n&lt;PackageReference Include=\"Diginsight.AspnetCore\" Version=\"3.0.0-alpha.205\" /&gt;\n&lt;PackageReference Include=\"Diginsight.Diagnostics\" Version=\"3.0.0-alpha.205\" /&gt;\n&lt;PackageReference Include=\"Diginsight.Diagnostics.Log4Net\" Version=\"3.0.0-alpha.205\" /&gt;\nwhere: - Diginsight.Diagnostics is the core engine for application flow rendering - Diginsight.Diagnostics.Log4Net integrates Log4Net file logs  - Diginsight.AspnetCore allows support for Dynamic Logging and Dynamic Configuration.\n\n\n\nalt text\n\n\n\n\nSTEP02: Add the Observability ActivitySource to your projects\nSystem Diagnostics emits telemetry by means of ActivitySource classes.\nIn our solution we’ll choose to use one ActivitySource class for every project, defined as below:\ninternal static class Observability\n{\n    public static readonly ActivitySource ActivitySource = new(Assembly.GetExecutingAssembly().GetName().Name!);\n}\n\n\n\nalt text\n\n\n\n\nSTEP03: Configure the startup sequence with ‘AddObservability()’ method\nAt this point we can configure the Log4Net file stream logger and the Console logger within the service startup sequence.\nwe use an AddObservability extension method:\npublic static void Main(string[] args)\n{\n    var app = default(WebApplication);\n\n        var builder = WebApplication.CreateBuilder(args); \n        builder.Host.ConfigureAppConfigurationNH(); \n\n        builder.Services.AddObservability(builder.Configuration);     // Diginsight: registers loggers\n\n        //...\n        //... register services \n        //...\n\n        app = builder.Build(); logger.LogDebug(\"app = builder.Build();\");\n\n        logger.LogInformation(\"Configure the HTTP request pipeline.\");\n        if (app.Environment.IsDevelopment())\n        {\n            app.UseSwagger();\n            app.UseSwaggerUI(c =&gt;\n            {\n                c.SwaggerEndpoint(\"/swagger/v1/swagger.json\", \"KnowledgeAPI v1\");\n                c.OAuthClientId(azureAd.ClientId);\n                c.OAuthUsePkce();\n                c.OAuthScopeSeparator(\" \");\n            });\n        }\n\n        app.UseHttpsRedirection();\n\n        app.UseAuthorization();\n\n        app.MapControllers();\n    }\n\n    app.Run();\n}\nwhere builder.Services.AddObservability(builder.Configuration); registers loggers for Log4net and the application Console as shown below:\npublic static class AddObservabilityExtension\n{\n    public static IServiceCollection AddObservability(this IServiceCollection services, IConfiguration configuration)\n    {\n        // registers http context accessor\n        // this is used to manage dynamic logging and dynamic configuration\n        // when calls land to the controllers methods\n        services.AddHttpContextAccessor(); \n        services.TryAddSingleton&lt;IActionContextAccessor, ActionContextAccessor&gt;();\n\n        // registers Logging providers for the Console and Log4Net\n        services.AddLogging(\n            loggingBuilder =&gt;\n            {\n                loggingBuilder.AddConfiguration(configuration.GetSection(\"Logging\"));\n                loggingBuilder.ClearProviders();\n\n                if (configuration.GetValue(\"AppSettings:ConsoleProviderEnabled\", true))\n                {\n                    // registers Logging providers for the Console\n                    loggingBuilder.AddDiginsightConsole(configuration.GetSection(\"Diginsight:Console\").Bind);\n                }\n\n                if (configuration.GetValue(\"AppSettings:Log4NetProviderEnabled\", false))\n                {\n                    // registers Logging providers for Log4Net\n                    loggingBuilder.AddDiginsightLog4Net(\n                        static sp =&gt;\n                        {\n                            IHostEnvironment env = sp.GetRequiredService&lt;IHostEnvironment&gt;();\n                            string fileBaseDir = env.IsDevelopment()\n                                ? Environment.GetFolderPath(Environment.SpecialFolder.UserProfile, Environment.SpecialFolderOption.DoNotVerify)\n                                : $\"{Path.DirectorySeparatorChar}home\";\n\n                            return new IAppender[]\n                            {\n                                new RollingFileAppender()\n                                {\n                                    File = Path.Combine(fileBaseDir, \"LogFiles\", \"Diginsight\", typeof(Program).Namespace!),\n                                    AppendToFile = true,\n                                    StaticLogFileName = false,\n                                    RollingStyle = RollingFileAppender.RollingMode.Composite,\n                                    DatePattern = @\".yyyyMMdd.\\l\\o\\g\",\n                                    MaxSizeRollBackups = 1000,\n                                    MaximumFileSize = \"100MB\",\n                                    LockingModel = new FileAppender.MinimalLock(),\n                                    Layout = new DiginsightLayout()\n                                    {\n                                        Pattern = \"{Timestamp} {Category} {LogLevel} {TraceId} {Delta} {Duration} {Depth} {Indentation|-1} {Message}\",\n                                    },\n                                },\n                            };\n                        },\n                        static _ =&gt; Level.All\n                    );\n                }\n            }\n        );\n\n        // Loads options for diginsight activities\n        // this decides which activities should be traced into the text based streams \n        // for the console and Log4Net\n        services.ConfigureClassAware&lt;DiginsightActivitiesOptions&gt;(configuration.GetSection(\"Diginsight:Activities\"))\n                .DynamicallyConfigureClassAwareFromHttpRequestHeaders&lt;DiginsightActivitiesOptions&gt;();\n\n        // Register DefaultDynamicLogLevelInjector for support of Dynamic logging\n        services.AddDynamicLogLevel&lt;DefaultDynamicLogLevelInjector&gt;();\n\n        return services;\n    }\n\n}\nPlease, note that DiginsightActivitiesOptions are read from Diginsight:Activities the configuration section shown below: \nNote that Diginsight:Activities settings are registered with ConfigureClassAware to ensure that such configurations can be specified with class level granularity. Use ClassAware configurations\nAlso note that AddHttpContextAccessor and AddDynamicLogLevel are used to ensure support for Dynamic logging (ref: Use dynamic logging):\n    services.AddHttpContextAccessor(); \n    services.TryAddSingleton&lt;IActionContextAccessor, ActionContextAccessor&gt;();\n    services.AddDynamicLogLevel&lt;DefaultDynamicLogLevelInjector&gt;();\n\nWorking code is available into SampleWebApi01 sample, within telemetry_samples repository.\n\n\nSTEP04 (Opt): add Instrumentation to the startup sequence\nStartup sequence may be tricky and often hides startup issues that are very difficult to debug.\nDiginsight provides full observability of the startup sequence by means of the DeferredLoggerFactory.  In particular, the DeferredLoggerFactory: - gathers the execution flow until the the standard logging system is setup. - Flushes recorded telemetry upon services creation, as soon as ILogger&lt;&gt; providers are installed.\nhere we create the deferred logger factory at application startup:\npublic static IDeferredLoggerFactory LoggerFactory;\n\nstatic Program()\n{\n    DiginsightActivitiesOptions activitiesOptions = new() { LogActivities = true };\n    IDeferredLoggerFactory deferredLoggerFactory = new DeferredLoggerFactory(activitiesOptions: activitiesOptions);\n    deferredLoggerFactory.ActivitySourceFilter = (activitySource) =&gt; activitySource.Name.StartsWith($\"DS.\");\n    LoggerFactory = deferredLoggerFactory;\n}\ndeferredLoggerFactory implements in memory recording of the application flow, until ILogger services are created.\nAfter ILogger services creation, FlushOnCreateServiceProvider can be used to register Flush of the recorded application flow and redirection of the deferredLoggerFactory to the registered LoggerFactory.\nThe real Log flush is provided at services creation time by means of the Diginsight ServiceProvider. the Diginsight ServiceProvider is registered by means of UseDiginsightServiceProvider method as shown below.\nThe snippet below shows the main method where the startup flow is made observable by means of FlushOnCreateServiceProvider and UseDiginsightServiceProvider.\npublic static void Main(string[] args)\n{\n    ILogger logger = LoggerFactory.CreateLogger(typeof(Program));\n\n    var app = default(WebApplication);\n    using (var activity = Observability.ActivitySource.StartMethodActivity(logger, new { args }))\n    {\n        var builder = WebApplication.CreateBuilder(args); logger.LogDebug(\"builder = WebApplication.CreateBuilder(args);\");\n        builder.Host.ConfigureAppConfigurationNH(); logger.LogDebug(\"builder.Host.ConfigureAppConfigurationNH();\");\n        builder.Services.AddObservability(builder.Configuration);     // Diginsight: registers loggers\n        builder.Services.FlushOnCreateServiceProvider(LoggerFactory); // Diginsight: registers startup log flush\n\n        // ... \n        // services registration omitted.\n        // ... \n\n        var webHost = builder.Host.UseDiginsightServiceProvider(); // Diginsight: Flushes startup log and initializes standard log\n        app = builder.Build(); logger.LogDebug(\"app = builder.Build();\");\n\n        logger.LogInformation(\"Configure the HTTP request pipeline.\");\n        if (app.Environment.IsDevelopment())\n        {\n            app.UseSwagger();\n            app.UseSwaggerUI(c =&gt;\n            {\n                c.SwaggerEndpoint(\"/swagger/v1/swagger.json\", \"KnowledgeAPI v1\");\n                c.OAuthClientId(azureAd.ClientId);\n                c.OAuthUsePkce();\n                c.OAuthScopeSeparator(\" \");\n            });\n        }\n\n        app.UseHttpsRedirection();\n\n        app.UseAuthorization();\n\n\n        app.MapControllers();\n\n    }\n\n    app.Run();\n}\n\n\nSTEP05: add Instrumentation log to methods and return values\nWe are now ready to add automatic instrumentation to methods and return values:\nhere is an example method start\n[HttpGet(Name = \"GetWeatherForecast\")]\npublic IEnumerable&lt;WeatherForecast&gt; Get()\n{\n    using var activity = Observability.ActivitySource.StartMethodActivity(logger);\nhere is an example method completion where the result value is added to the method closing row:\n    activity?.SetOutput(ret);\n    return ret;\n}\nthe real code may looks as shown below: \nhere is the resulting flow for the service startup and an API call:"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Diginsight blog",
    "section": "",
    "text": "Steps to add diginsight to SampleWebApi01\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nSep 29, 2024\n\n\nDario Airoldi\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To Diginsight Blog\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nAug 25, 2024\n\n\nDario Airoldi\n\n\n\n\n\n\nNo matching items"
  }
]